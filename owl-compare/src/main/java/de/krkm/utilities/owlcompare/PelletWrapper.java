package de.krkm.utilities.owlcompare;

import com.clarkparsia.pellet.owlapiv3.PelletReasoner;
import de.krkm.trex.reasoner.TRexReasoner;
import de.krkm.utilities.collectiontostring.CollectionToStringWrapper;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.reasoner.BufferingMode;
import org.semanticweb.owlapi.reasoner.Node;
import org.semanticweb.owlapi.reasoner.NodeSet;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

/**
 * Provide some additional methods whose results can be compared to the ones generated by TRex
 */
public class PelletWrapper {
    private PelletReasoner pellet;
    private OWLOntology ontology;
    private OWLDataFactory df;

    public PelletWrapper(PelletReasoner pellet) {
        this.pellet = pellet;
        this.ontology = pellet.getRootOntology();
        this.df = ontology.getOWLOntologyManager().getOWLDataFactory();
    }

    public Set<OWLClass> getUnsatisfiableConcepts() {
        return pellet.getUnsatisfiableClasses().getEntitiesMinusBottom();
    }

    public Set<OWLObjectProperty> getUnsatisfiableProperties() {
        Set<OWLObjectProperty> res = new HashSet<OWLObjectProperty>();
        NodeSet<OWLObjectPropertyExpression> subObjectProperties = pellet.getSubObjectProperties(
                pellet.getRootOntology().getOWLOntologyManager().getOWLDataFactory().getOWLBottomObjectProperty(),
                true);
        for (Node<OWLObjectPropertyExpression> n : subObjectProperties) {
            for (OWLObjectPropertyExpression ex : n.getEntitiesMinusBottom()) {
                if (ex instanceof OWLObjectProperty) {
                    res.add((OWLObjectProperty) ex);
                }
            }
        }
        return res;
    }

    public Set<OWLClass> getSubConceptCycles() {
        Set<OWLClass> res = new HashSet<OWLClass>();
        for (OWLClass curClass : ontology.getClassesInSignature()) {
            for (OWLClassExpression superClass : curClass.getSuperClasses(ontology)) {
                if (superClass instanceof OWLClass) {
                    if (pellet.isEntailed(df.getOWLSubClassOfAxiom(superClass, curClass))) {
                        res.add(curClass);
                    }
                }
            }
        }

        return res;
    }

    public Set<OWLClass> getSubConceptCycles2() {
        Set<OWLClass> res = new HashSet<OWLClass>();
        for (OWLClass curClass : ontology.getClassesInSignature()) {
            Set<OWLClass> entities = pellet.getEquivalentClasses(curClass).getEntitiesMinus(curClass);
            Set<OWLAxiom> referencingAxioms = curClass.getReferencingAxioms(ontology);
            for (OWLClass c1 : entities) {
                if ((referencingAxioms.contains(df.getOWLSubClassOfAxiom(curClass, c1)) &&
                        referencingAxioms.contains(df.getOWLSubClassOfAxiom(c1, curClass))) ||
                        referencingAxioms.contains(df.getOWLEquivalentClassesAxiom(c1, curClass))) {
                    continue;
                }
                res.add(curClass);
                break;
            }
        }

        return res;
    }

    public Set<OWLObjectProperty> getSubObjectPropertyCycles() {
        Set<OWLObjectProperty> res = new HashSet<OWLObjectProperty>();
        for (OWLObjectProperty curProperty : ontology.getObjectPropertiesInSignature()) {
            for (OWLObjectPropertyExpression superProperty : curProperty.getSuperProperties(ontology)) {
                if (superProperty instanceof OWLObjectProperty) {
                    if (pellet.isEntailed(df.getOWLSubObjectPropertyOfAxiom(superProperty, curProperty))) {
                        res.add(curProperty);
                    }
                }
            }
        }

        return res;
    }

    public static void main(String[] args) throws OWLOntologyCreationException {
        OWLOntology ontology = OWLManager.createOWLOntologyManager().loadOntologyFromOntologyDocument(
                new File("/home/daniel/cleaned_ontologies/uma-random-0.02-arctan.owl"));
        PelletReasoner pellet = new PelletReasoner(ontology, BufferingMode.BUFFERING);

        PelletWrapper wrapper = new PelletWrapper(pellet);

        TRexReasoner trex = new TRexReasoner(ontology);

        Set<OWLClass> scc1 = wrapper.getSubConceptCycles();
        Set<OWLClass> scc2 = wrapper.getSubConceptCycles2();

        Set<OWLClass> conceptCycles = trex.getConceptCycles();

        System.out.println("Size SCC1:" + scc1.size());
        System.out.println("Size SCC2:" + scc2.size());
        System.out.println("Size CC: " + conceptCycles.size());
        System.out.println("SubConceptCycles: " + new CollectionToStringWrapper(scc1));
        System.out.println("SubConceptCycles2: " + new CollectionToStringWrapper(scc2));
        System.out.println("CC: " + new CollectionToStringWrapper(conceptCycles));
        Set<OWLClass> unsatisfiableConcepts = wrapper.getUnsatisfiableConcepts();
        System.out.println("Unsat Concepts: " + new CollectionToStringWrapper(unsatisfiableConcepts));
        System.out.println(unsatisfiableConcepts.size());


        System.out.println();

//        System.out.println("SubObjectPropertyCycles: " + new CollectionToStringWrapper(wrapper.getSubObjectPropertyCycles()));
        System.out.println("Unsat Concepts: " + new CollectionToStringWrapper(wrapper.getUnsatisfiableConcepts()));
//        System.out.println("Unsat Properties: " + new CollectionToStringWrapper(wrapper.getUnsatisfiableProperties()));
    }
}
